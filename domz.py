'''–í—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö —á—Ç–æ –± –µ—Å–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å –Ω–µ –∑–∞—Ç–µ–º–Ω—è—è, –º–µ—Ç–æ–¥—ã –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ –∑–∞—Ç–µ–º–Ω–µ–Ω—ã
    –í—Å–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∑–∞–¥–∞—á–∏. –õ–µ–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏ -
    –∫–æ–º–º–µ–Ω—Ç-—Ñ—É–Ω–∫—Ü–∏—è "TO_ DO" '''


# TODO 1 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–≤–∞ —Å–ª–æ–≤–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç–æ–π.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
def two_words(w1, w2):
    return w1 + ', ' + w2


# I/O
# wor1 = input('Enter 2 words pressing enter after each >>>')
# wor2 = input('2nd>>>>')
# print(two_words(wor1, wor2))
# print('-' * 40)


# TODO 2 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ a, b –∏ x –∏ –≤—ã–≤–æ–¥–∏—Ç True, –µ—Å–ª–∏ x –ª–µ–∂–∏—Ç –º–µ–∂–¥—É a –∏ b, –∏–Ω–∞—á–µ ‚Äì False.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
def compare(a, b, x):
    return a < x < b


# I/O
# n1 = int(input('#1 >>> '))
# n2 = int(input('#2 >>> '))
# n3 = int(input('#3 >>> '))
# print('{0} is less then {2} and {1} larger then {2} is '.format(n1, n2, n3), compare(n1, n2, n3), )
# print('-' * 40)

# TODO 3 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ—à–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ ax^2 + bx + c = 0 –ó–Ω–∞—á–µ–Ω–∏—è a, b –∏ c –≤–≤–æ–¥—è—Ç—Å—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import sys


# INPUT check
# while True:
#     try:
#         a = int(input("Enter  of a(cannot be equal to zero), b and c for Quadratic equation a >>> : "))
#         b = int(input("Enter b >>> : "))
#         c = int(input("Enter c >>> : "))
#         break
#
#     except ValueError:
#         print('-' * 40)
#         print('Value Error - please enter actual numbers from the beginning! bitch')

def quadratic(a, b, c):
    if a == 0:
        print('Wrong turn boi')
        sys.exit('This is so wrong, I told u "a" cannot be equal zero')

    d = b ** 2 - 4 * a * c  # discriminant

    if d < 0:
        print("ax^2 + bx + c = 0 has no solution")
    elif d == 0:
        x = -b / 2 * a
        print("ax^2 + bx + c = 0 solutions:  {}".format(x))
    else:
        x_1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / 2 * a
        x_2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / 2 * a
        print(f"This equation has two solutions: {x_1} and {x_2}")


# OUTPUT
# quadratic(a, b, c)
# TODO 4 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –ø–ª–æ—â–∞–¥—å. –§–æ—Ä–º—É–ª–∞ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞ S=pi*R^2 .
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import math  # already imported earlier, but still just as a reminder that it should be present


# Input
# radiance=int(input('What is the radius of your circle, boi?'))

def circle_square(rad):
    return math.pi * rad ** 2  # parentheses are not necessary due to the operator precedence


# OUTPUT
# print(circle_square(radiance))
# TODO 5 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —á–∏—Å–ª–∞ –∏
# –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –û–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ, –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤
# —Å—Ç–µ–ø–µ–Ω—å, —Å–∏–Ω—É—Å, –∫–æ—Å–∏–Ω—É—Å –∏ —Ç–∞–Ω–≥–µ–Ω—Å —á–∏—Å–ª–∞.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


'''I decided not to write code for obvious if..elif add/sub/mul etc...'''
import math

'''Input is below the functions'''


def calc1(num1, op, num2=None):
    e = 2.718281828459045
    if op.lower() == 'sin':  # can also be done with math.sin
        return (e ** (num1 * 1j)).imag
    elif op.lower() == 'cos':  # can also be done with math.cos
        return (e ** (num1 * 1j)).real
    elif op.lower() == 'tan':  # coundn't find tan formula and yes I am bad in math
        return math.tan(num1)
    return eval(f'{num1}{op}{num2}')


def calc2(num1, op, num2=1):  # second option of calculator
    l_op = {'+': (num1 + num2), '-': (num1 - num2), '/': (num1 / num2), '*': (num1 * num2), '**': (num1 ** num2),
            'sin': math.sin(num1),
            'cos': math.cos(num1), 'tan': math.tan(num1)}
    return l_op[op]


'''output with input control, showed input control in exercise #5'''
# I/O
# while True:
#     try:
#         num1=float(input('Please enter two numbers and an operation. \n >>> Num1>>> '))
#         op = input('Operations: + , - , / , * , ** , sin , cos , tan >>>')
#         break
#     except ValueError or KeyError:
#         print("Please enter the value you are asked for, don't invent the fucking wheel. Damn mongoloid \n")
#
# if op.lower() in 'sincostan':
#     print(f'Getting your {op}')
#     num2=1
# else:
#     num2 = float(input('num2 >>>'))
#     print(f'Performing your {op}')
#
# print(f'the result of you operation is {calc2(num1,op.lower(),num2)}')
#
# print('-'*40)

# TODO 6 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –∏–º—è, –∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º, –≤—ã–¥–∞—ë—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'''Sorry for explicit language'''


def name_checker(name):
    if 'paul' in name.lower():
        if name == 'Paul':
            print('Yeh, baby its exactly my name')
        else:
            print('Yes, this is looks like my name')
    else:
        print('Not even close, bitch')


#
# OUTPUT
# nm=input('What is my name?')
# name_checker(nm)


# TODO 7 –î–∞–Ω—ã —á–∏—Å–ª–∞ a –∏ b (a < b). –í—ã–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç a –¥–æ b (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def numrange(a, b):
    return sum(
        [i for i in range(a, b + 1) if a < b] or [i for i in range(b, a + 1) if a > b])  # two actions on a<b and a>b


# I/O
# nom1 = int(input('num1>>> '))
# nom2 = int(input('num2>>> '))
# print(numrange(nom1, nom2))


# TODO 8 –§–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º —á–∏—Å–ª–∞ n –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ ùëõ!=1‚àô2‚àô3‚àô‚Ä¶‚àôùëõ. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–∞.(—Ü—ã–∫–ª!)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
def fac1(n):  # Recursion
    if n == 1:
        return 1
    return n * fac1(n - 1)


def fac2(n):  # non-recursion
    fact = 1
    for num in range(1, n + 1):
        fact *= num
    return fact


# OUTPUT
# print(fac2(6))
# print(fac1(4))

# TODO 9 –ò—Å–ø–æ–ª—å–∑—É—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ print(‚Äò*‚Äô, end=‚Äô‚Äô), print(‚Äò ‚Äò, end=‚Äô‚Äô) –∏ print() –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def triangle1():
    for i in range(1, 30, 2):  # triangle with l-b allighnment
        print(i * '*', end='')
        print()
    print('=' * 35)
    for i in range(1, 30, 2):  # triangle with r-t allignment
        print((i * ' ' + (30 - i) * '*'))
    print('=' * 35)
    for i in range(30, 1, -2):  # triangle with l-t allignment
        print(i * '*')
    print('*')
    print('=' * 35)
    print(29 * ' ' + '*', end='')
    for i in range(30, 1, -2):  # triangle with r-b allignment
        print((i * ' ' + (30 - i) * '*'))
    print('=' * 35)


def triangle2():
    [print(i * '*') for i in range(1, 30, 2)]  # l-b
    print('=' * 35 + '\n')
    [print((i * ' ' + (30 - i) * '*')) for i in range(1, 30, 2)]  # r-t
    print('=' * 35 + '\n')
    ([print(i * '*') for i in range(30, 1, -2)] + [print(i) for i in ["*"]])  # l-t
    print('=' * 35 + '\n')
    [print(29 * ' ' + '*', end='')] + [print((i * ' ' + (30 - i) * '*')) for i in range(30, 1, -2)]  # r-b
    print('=' * 35 + '\n')


# Output
# triangle1()
# triangle2()

# TODO 10 –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞. –†–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ :)) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏
#  –±—ã–ª –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –∫–≤–∞–¥—Ä–∞—Ç –∏ False - –µ—Å–ª–∏ –Ω–µ—Ç.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
def square_pr_draw(a, b):
    for y_axis in range(0, a):
        print()
        for x_axis in range(0, b):
            print('o', end='')
    if a == b:
        print('\n \t \tthis is square even thos it doesn"t look like it')
        return True
    else:
        print('\n \t \t This is not square, bitch')
        return False


# Output
# print(square_pr_draw(4,4))
# print('-'*40+'\n')
# print(square_pr_draw(5,3))

# TODO 11     –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º. –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ,
#  –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –í–∞—à–∏–º –∏–º–µ–Ω–µ–º.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def greeting():
    name = input('What is ur name?')
    if name == '':
        name = 'Paul'
    print(f'Hello mein liebe,{name}')


def greeting2(name='Paul'):
    print(f'Hello mein liebe,{name}')


# #I/O
# name = input('What is ur name?')
# if name:
#     greeting2(name)
# else:
#     greeting2()
#
# greeting()


# TODO 1    –§—É–Ω—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º—É –≤—Å–µ—Ö —Ü—ã—Ñ—Ä —á–∏—Å–ª–∞.
#     –ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–∞:
#     sum_digit_from_number(34) => 7
#     sum_digit_from_number(2) => 2
#     sum_digit_from_number(1342) => 10
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def digit_sum1(num):
    nomero = 0
    for i in str(num):
        nomero += int(i)
    return nomero


def digit_sum2(num):
    return sum(map(int, str(num)))


# print(digit_sum1(87))
# print(digit_sum2(347))

# TODO 2 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ N $ —Å—Ä–æ–∫–æ–º –Ω–∞ years –ª–µ—Ç –ø–æ–¥ 11.5% –≥–æ–¥–æ–≤—ã—Ö (–∫–∞–∂–¥—ã–π –≥–æ–¥ —Ä–∞–∑–º–µ—Ä –µ–≥–æ –≤–∫–ª–∞–¥–∞
#  —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 11.5%. –≠—Ç–∏ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è –∫ —Å—É–º–º–µ –≤–∫–ª–∞–¥–∞, –∏ –Ω–∞ –Ω–∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —Ç–æ–∂–µ –±—É–¥—É—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã).
#  –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é bank, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã a –∏ years, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞ —Å—á–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ years –ª–µ—Ç.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


def investment(amount: int, time, rate) -> float:  # amount in int(.2f point ignored for precision),
    # time in years,rate in percentage e.g 11.5 for 11.5%
    time_round = int(time)  # how many whole years are there
    for years in range(1, (time_round + 1)):
        amount += (amount * (rate / 100))
    amount += amount * (rate / 100) * (time - time_round)  # getting extra amount if time imput was float(e.g 1.6 years)
    return round((amount / 100), 2)  # converting int to float to get $ value instead of Cents


#
# #Output
# print(investment(50000, 4.5, 11.5))  # displays value of your
# investment account with starting balance of $500.00 in 2 years
# with pro rate of 11.5%/year = result $615.00

# TODO 3 –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ß—Ç–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¥–µ–ª–∞—Ç—å.
#     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–≤–∞ —Ä–∞–∑–∞ –ø–∞—Ä–æ–ª—å(—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
#  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True , –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–≤–∞ —Ä–∞–∑–∞ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω–æ –∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2(–∑–∞–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ord() –∏ chr())
#  —Å–∏–º–≤–æ–ª–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –ò–Ω–∞—á–µ-False.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'''I didnt find any efficient way to use ord() and chr() for this'''


def password_check1(input1, input2):
    upper_count = 0
    if str(input1) == str(input2):
        for simb in input1:
            if simb.isupper():
                upper_count += 1
    if upper_count >= 2:
        return True
    else:
        return False


def password_check2(input1, input2):  # short version of previous functino with comprehension

    return 2 <= sum(1 for simb in input1 if input1 == input2 if simb.isupper())
    # return 2 <= sum(1 for simb in input1 if input1 == input2 if simb in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') ##2nd option
    # return 2 <= sum(1 for simb in input1 if input1 == input2 if simb ==simb.upper()) ##3d option


# print(password_check1('AMGddA', 'AMGddA'))
# print(password_check2('OMGthisispassword', 'OMGthisispassword'))

# TODO 4  –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–¥–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ—Å–Ω—ã–π. –í–æ–∑—Ä–∞—â–∞–µ—Ç True- –µ—Å–ª–∏ –≤—ã—Å–æ–∫–æ—Å–Ω–∏–π.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def leap_year_check(year):
    return 0 == year % 4, print(f'it is {0 == year % 4} that {year} is leap year')


# leap_year_check(2016)
